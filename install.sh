#!/bin/bash

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Stuff for Systemd
AUTOMATION_NAME="datalogger"
AUTOMATION_SCRIPT="$SCRIPT_DIR/automation.py"
WEBAPP_NAME="farm-webapp"
WEBAPP_SCRIPT="$SCRIPT_DIR/webapp.py"
VENV="$SCRIPT_DIR/.venv/bin/python"
AUTOMATION_SERVICE="/etc/systemd/system/${AUTOMATION_NAME}.service"
WEBAPP_SERVICE="/etc/systemd/system/${WEBAPP_NAME}.service"

# End of

UPLOAD_DIR="/srv/ftp/upload"

echo "[*] Installing vsftpd..."

# Detect package manager
if command -v dnf &> /dev/null; then
    sudo dnf install -y vsftpd python3 python3-pip python-tkinter
elif command -v apt &> /dev/null; then
    sudo apt update && sudo apt install -y vsftpd python3 python3-pip python3-tkinter
else
    echo "Unsupported package manager. Install vsftpd manually."
    exit 1
fi

echo "[*] Creating upload directory..."
sudo mkdir -p "$UPLOAD_DIR"
sudo chmod 777 "$UPLOAD_DIR"
sudo chown ftp:ftp "$UPLOAD_DIR"

sudo mkdir -p /var/run/vsftpd/empty
sudo chown root:root /var/run/vsftpd/empty
sudo chmod 755 /var/run/vsftpd/empty

echo "[*] Locating vsftpd.conf..."
if [[ -f /etc/vsftpd.conf ]]; then
    CONF_PATH="/etc/vsftpd.conf"
elif [[ -f /etc/vsftpd/vsftpd.conf ]]; then
    CONF_PATH="/etc/vsftpd/vsftpd.conf"
else
    echo "‚ùå Cannot find vsftpd.conf!"
    exit 1
fi

echo "[*] Backing up original vsftpd.conf..."
sudo cp "$CONF_PATH" "$CONF_PATH.bak"

echo "[*] Writing new vsftpd.conf..."
cat <<EOF | sudo tee "$CONF_PATH" > /dev/null
# This file is automatically generated by the VF_Data_Logger program. 
# See vsftpd.conf.bak for the original
#
listen=NO
listen_ipv6=YES
anonymous_enable=YES
local_umask=002
anon_upload_enable=YES
anon_mkdir_write_enable=YES
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=NO
xferlog_file=/var/log/vsftpd.log
pam_service_name=vsftpd
anon_other_write_enable=YES
log_ftp_protocol=YES
ftp_username=ftp
anon_root=/srv/ftp
anon_umask=002
file_open_mode=0664
write_enable=YES

EOF

echo "[*] Opening FTP port in firewall (if applicable)..."
if command -v firewall-cmd &> /dev/null; then
    sudo firewall-cmd --permanent --add-service=ftp
    sudo firewall-cmd --reload
fi

echo "[*] Checking if SELinux exists..."

# Check if SELinux is installed
if ! command -v getenforce &> /dev/null; then
    echo "SELinux is not installed."
else
    echo "SELinux is installed. Configuring..."
    sudo setsebool -P allow_ftpd_anon_write=1
    sudo semanage fcontext -a -t public_content_rw_t "($UPLOAD_DIR)(/.*)?"
    sudo restorecon -Rv $UPLOAD_DIR

    # Systemd permissions - compile and load policy on target system
    echo "[*] Compiling and loading SELinux policy module..."
    if [[ -f "$SCRIPT_DIR/datalogger.te" ]]; then
        cd "$SCRIPT_DIR"
        if sudo checkmodule -M -m -o datalogger.mod datalogger.te 2>/dev/null && \
           sudo semodule_package -o datalogger.pp -m datalogger.mod 2>/dev/null && \
           sudo semodule -i datalogger.pp 2>/dev/null; then
            echo "‚úÖ SELinux policy module compiled and loaded successfully"
            # Clean up build artifacts
            sudo rm -f datalogger.mod datalogger.pp
        else
            echo "‚ö†Ô∏è  Warning: Could not compile/load SELinux policy module"
            echo "    The datalogger service may need manual SELinux permissions"
            echo "    If you encounter permission issues, run:"
            echo "    sudo setsebool -P systemd_read_user_home_files 1"
        fi
    else
        echo "‚ö†Ô∏è  Warning: datalogger.te not found, skipping SELinux policy"
    fi
fi


echo "[*] Restarting vsftpd..."
sudo systemctl restart vsftpd
sudo systemctl enable vsftpd

python3 -m venv .venv
.venv/bin/pip install -r requirements.txt

echo ""
echo "‚úÖ FTP server is running."
echo "üìÇ Anonymous uploads are allowed at: ftp://<your-ip-address>/upload/"
echo "   (Replace <your-ip-address> with the IP of this machine.)"


echo ""
echo "Creating automation service (XML processing & Unitas uploads)..."

sudo tee $AUTOMATION_SERVICE > /dev/null <<EOF
[Unit]
Description=Farm Data Logger Automation
After=network.target

[Service]
Type=simple
ExecStart=$VENV $AUTOMATION_SCRIPT
WorkingDirectory=$SCRIPT_DIR
Restart=on-failure
User=$USER

# These ensure logs go to journal
StandardOutput=journal
StandardError=journal

# Optional: prevent output buffering
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF

echo "Creating web application service..."

sudo tee $WEBAPP_SERVICE > /dev/null <<EOF
[Unit]
Description=Farm Data Web Application
After=network.target

[Service]
Type=simple
ExecStart=$VENV $WEBAPP_SCRIPT
WorkingDirectory=$SCRIPT_DIR
Restart=on-failure
User=$USER

# These ensure logs go to journal
StandardOutput=journal
StandardError=journal

# Optional: prevent output buffering
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF

echo "Reloading systemd..."
sudo systemctl daemon-reload

echo "Enabling services to start on boot..."
sudo systemctl enable $AUTOMATION_NAME.service
sudo systemctl enable $WEBAPP_NAME.service

echo ""
echo "‚úÖ Services created!"
echo "You can start them now with:"
echo "  sudo systemctl start $AUTOMATION_NAME.service"
echo "  sudo systemctl start $WEBAPP_NAME.service"
echo ""
echo "View logs with:"
echo "  sudo journalctl -u $AUTOMATION_NAME.service -f"
echo "  sudo journalctl -u $WEBAPP_NAME.service -f"

# Create XML watcher service
WATCHER_NAME="xml-watcher"
WATCHER_SCRIPT="$SCRIPT_DIR/watch_xml_dir.py"
WATCHER_SERVICE_FILE="/etc/systemd/system/${WATCHER_NAME}.service"

echo ""
echo "Creating XML directory watcher service..."

sudo tee $WATCHER_SERVICE_FILE > /dev/null <<EOF
[Unit]
Description=XML Directory Watcher
After=network.target

[Service]
Type=simple
ExecStart=$VENV $WATCHER_SCRIPT
WorkingDirectory=$SCRIPT_DIR
Restart=on-failure
User=$USER

# These ensure logs go to journal
StandardOutput=journal
StandardError=journal

# Optional: prevent output buffering
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF

echo "Reloading systemd..."
sudo systemctl daemon-reload

echo "Enabling XML watcher service to start on boot..."
sudo systemctl enable $WATCHER_NAME.service

echo ""
echo "‚úÖ XML watcher service created!"
echo "You can start it now with:"
echo "  sudo systemctl start $WATCHER_NAME.service"
echo ""
echo "View watcher logs with:"
echo "  sudo journalctl -u $WATCHER_NAME.service -f"
